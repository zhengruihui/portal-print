/********************** (C) COPYRIGHT 2015 DediBot ******************************
  * @file    SdPrint.c
  * @author  Dedibot
  * @version V1.2.0
  * @date    2016-03-25
  * @brief   SD操作
*********************************************************************************/

/*******************************************
	包含关系
********************************************/
#include "Print.h"				//SD卡操作
#include "DataParse.h"			//通信数据解析
#include "usbd_cdc_if.h"
#include "ProtocolMng.h"
#include "DobotMagician.h"			//机械臂
#include "BSData.h"
/*******************************************


*******************************************
    本地全局变量
********************************************/

/*******************************************
	外部参考变量
********************************************/

/*******************************************
	内部函数声明
********************************************/

/*******************************************
		外部函数
*******************************************/
void Print_Init( PORTALFRAME *this )
{
	this->printInfo.stage = PRINT_STAGE_STOPPRINT;
	memset(&this->printInfo, 0, sizeof(PRINTINFO));
}

//打印结束或是停止打印的处理
void Print_Exit( PORTALFRAME *this )
{
	int i;

	PositionMng_Clear(&this->positionMng);
	PrintDataMng_Stop(&this->printDataMng);
	this->printInfo.printGcodeCount = 0;
	this->printInfo.TotalPrintTime = 0;
	this->printInfo.PrintTime = 0;
	for(i = 0; i < this->extruderCount; i++)
	{
		TempCtrl_StopHeat(this->extruder_Stru[i].heatItem);
	}

	PortalFrame_Go_Standby(this);
}

/******************************************
功能：打印前预处理
作成者：
作成日期：
参数：
返回值：
*******************************************/
bool Print_Start( PORTALFRAME *this )
{
	bool res;
	// 需要检测是否可以开始打印

	//打开文件，开始读取数据
	res = PrintDataMng_LocalStart(&this->printDataMng);

	if(res)
	{
		this->printInfo.totalgcodeSize = PrintDataMng_GetTotalSize(&this->printDataMng);
		this->printInfo.printGcodeCount = 0;
		this->printInfo.TotalPrintTime = 0;
		this->printInfo.PrintTime = 0;
		this->printInfo.stage = PRINT_STAGE_PRINTING;
		
		g_printer.portalFrame[0].printInfo.stage = PRINT_STAGE_PAUSEACTION;
		g_printer.portalFrame[2].printInfo.stage = PRINT_STAGE_PAUSEACTION;
	}
	

	
	return res;
}

/******************************************
功能：停止打印处理
作成者：
作成日期：
参数：
返回值：
*******************************************/
void Print_Stop( PORTALFRAME *this)
{
	switch(this->printInfo.stage)
	{
		case PRINT_STAGE_READPRINTTIME:	//取得打印时间
		case PRINT_STAGE_PRINTING:		//打印中
		case PRINT_STAGE_STOPWAITING:	//停止等待中
		case PRINT_STAGE_WAITTEMP:	    //等待加热状态
		case PRINT_STAGE_PAUSEACTION:	//暂停动作中
		case PRINT_STAGE_PAUSE:			//暂停中
		case PRINT_STAGE_ROBOT_HOMEWAIT:	//机械臂回零等待中
		case PRINT_STAGE_ROBOT_MOVEWAIT: //机械臂运动等待中
		case PRINT_STAGE_ROBOT_GETWAIT:	//机械臂拿取物质
		case PRINT_STAGE_ROBOT_PUTWAIT:	//机械臂放开物质
		case PRINT_STAGE_ROBOT_SETPARAMSWAIT: //机械臂参数设定中
		case PRINT_STAGE_WAITBLOCKNULL:	//等待当前运动完成
			PositionMng_Clear(&this->positionMng);
		    PositionMng_MoveHome_XY(&this->positionMng);     //回归原点

			this->printInfo.stage = PRINT_STAGE_STOPACTION;
			break;
		case PRINT_STAGE_STOPACTION:	//停止动作中
		case PRINT_STAGE_STOPPRINT:	//停止中
			// if(NULL != event.notify)
			// {
				// event.notify(_NG);		//失败
			// }
			break;
		default:
			break;
	}
}
/******************************************
功能：暂停打印处理（M25）
作成者：
作成日期：
参数：
返回值：
*******************************************/
void Print_Pause( PORTALFRAME *this)
{
	switch(this->printInfo.stage)
	{
		case PRINT_STAGE_READPRINTTIME:	//取得打印时间
		case PRINT_STAGE_PRINTING:		//打印中
		case PRINT_STAGE_WAITTEMP:	    //等待加热状态
		case PRINT_STAGE_ROBOT_HOMEWAIT:	//机械臂回零等待中
		case PRINT_STAGE_ROBOT_MOVEWAIT: //机械臂运动等待中
		case PRINT_STAGE_ROBOT_GETWAIT:	//机械臂拿取物质
		case PRINT_STAGE_ROBOT_PUTWAIT:	//机械臂放开物质
		case PRINT_STAGE_ROBOT_SETPARAMSWAIT: //机械臂参数设定中
		case PRINT_STAGE_WAITBLOCKNULL:	//等待当前运动完成
			this->printInfo.stage = PRINT_STAGE_PAUSE;
			break;

		case PRINT_STAGE_STOPWAITING:	//停止等待中
		case PRINT_STAGE_STOPACTION:	//停止动作中
		case PRINT_STAGE_STOPPRINT:	//停止中
		default:
			break;
	}
}
/******************************************
功能:恢复打印处理(M24)
作成者：
作成日期：
参数：
返回值：
*******************************************/
void Print_Continue( PORTALFRAME *this)
{
	switch(this->printInfo.stage)
	{
		case PRINT_STAGE_READPRINTTIME:	//取得打印时间
		case PRINT_STAGE_PRINTING:		//打印中
		case PRINT_STAGE_WAITTEMP:	    //等待加热状态
			this->printInfo.stage = PRINT_STAGE_STOPWAITING;
			break;

		case PRINT_STAGE_STOPWAITING:	//停止等待中
		case PRINT_STAGE_STOPACTION:	//停止动作中
			break;
		case PRINT_STAGE_PAUSE:	//暂停中
			this->printInfo.stage = PRINT_STAGE_PRINTING;
			break;
		default:
			break;
	}
}
/******************************************
功能：结束打印处理(M0)
作成者：
作成日期：
参数：
返回值：
*******************************************/
void Print_Finish( PORTALFRAME *this)
{
	switch(this->printInfo.stage)
	{
		case PRINT_STAGE_READPRINTTIME:	//取得打印时间
		case PRINT_STAGE_PRINTING:		//打印中
		case PRINT_STAGE_WAITTEMP:	    //等待加热状态
			this->printInfo.stage = PRINT_STAGE_STOPWAITING;
			break;

		case PRINT_STAGE_STOPWAITING:	//停止等待中
		case PRINT_STAGE_STOPACTION:	//停止动作中
		case PRINT_STAGE_STOPPRINT:	//停止中
		default:
			break;
	}
}
/******************************************
功能：读取缓冲区内容并打印
作成者：
作成日期：
参数：无
返回值：无
*******************************************/
void Print_Pro( PORTALFRAME *this )
{
	u8	length;								//存储读出数据长度
	bool res;
	// char * res;
	int i;

	length = 0;
	// Print_StarTime();//打印时间累加
	// PrintDataMng_NoPrintDataCheck();
	switch(this->printInfo.stage)
	{
		case PRINT_STAGE_READPRINTTIME:	//取得打印时间
			res = PrintDataMng_GetOneLine( &this->printDataMng, this->printInfo.gcode, &length );
			if(True == res)
			{
				char *pointer = strstr(this->printInfo.gcode, "Print time");
				if(pointer != NULL)
				{
					int time[3];
					int i, j;

					j = 0;
					for(i = 0; i < 3; i++)
					{
						for(; j < length; j++)
						{
							if((this->printInfo.gcode[j] >= '0') && (this->printInfo.gcode[j] <= '9'))
							{
								time[i] = atoi(&this->printInfo.gcode[j]);
								while((this->printInfo.gcode[j] >= '0') && (this->printInfo.gcode[j] <= '9'))
								{
									j++;
									if(j >= length)	break;
								}
								break;
							}
						}
					}
					this->printInfo.TotalPrintTime = time[0]*3600 + time[1]*60 + time[2];
					this->printInfo.stage = PRINT_STAGE_PRINTING;
				}
			}
			if(this->printDataMng.diskErrCount > 10)
			{
				Logger_string("read file error !!!");
				
				Print_Stop(this);
			}
			break;
		case PRINT_STAGE_PRINTING:		//打印中
			if(False != PositionMng_CanMove(&this->positionMng))
			{
				res = PrintDataMng_GetOneLine( &this->printDataMng, this->printInfo.gcode, &length );
				if(True == res)
				{
					this->printInfo.gcode[length] = '\0';						//此处必须有，gcode解析时需要'\0'

					this->printInfo.printGcodeCount += length;
					DataParse_G_M_Ctrl( this, this->printInfo.gcode );	//执行Gcode
				}
			}
			break;
		case PRINT_STAGE_WAITTEMP:	//等待加热状态
			for(i = 0; i < this->extruderCount; i++)
			{
				if(False != TempCtrl_IsWaitForTempSingle(this->extruder_Stru[i].heatItem))	break;
			}
			if(i >= this->extruderCount)
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;
			}
			break;
		case PRINT_STAGE_STOPWAITING:	//停止等待中
			if(False != PositionMng_IsMoveFinished(&this->positionMng))
			{
				PositionMng_MoveHome_XY(&this->positionMng);     //回归原点
				this->printInfo.stage = PRINT_STAGE_STOPACTION;
			}
			break;
		case PRINT_STAGE_STOPACTION:	//停止动作中
			if(False != PositionMng_IsHomingFinished(&this->positionMng))
			{
				Print_Exit(this);
				this->printInfo.stage = PRINT_STAGE_STOPPRINT;
			}
			break;		
		case PRINT_STAGE_STOPPRINT:	//停止中
			break;		
		case PRINT_STAGE_PAUSEACTION:	//暂停动作中
			if(False != PositionMng_IsMoveFinished(&this->positionMng))
			{
				PositionMng_MoveHome_XY(&this->positionMng);     //回归原点
				this->printInfo.stage = PRINT_STAGE_PAUSE;
			}
			break;
		case PRINT_STAGE_PAUSE:	//暂停中
			break;
			

		
		case PRINT_STAGE_ROBOT_HOMEWAIT:	//机械臂回零等待中
			if(False != Robot_IsHomingFinished())
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;		
			}
			break;
		case PRINT_STAGE_ROBOT_MOVEWAIT: 	//机械臂运动等待中
			if(False != Robot_IsMoveFinished())
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;	
			}
			break;
		case PRINT_STAGE_ROBOT_GETWAIT:	//机械臂拿取物质
			if(False != Robot_IsGripperActionFinish())
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;	
				gripper = 1;
			}
			break;
		case PRINT_STAGE_ROBOT_PUTWAIT:	//机械臂放开物质
			if(False != Robot_IsGripperActionFinish())
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;
				gripper = 1;
			}
			break;
		case PRINT_STAGE_ROBOT_SETPARAMSWAIT:
			if(False != Robot_IsSetParamsFinished())
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;		
			}
			break;
		case PRINT_STAGE_WAITBLOCKNULL:
			if(False != PositionMng_IsMoveFinished(&this->positionMng))
			{
				this->printInfo.stage = PRINT_STAGE_PRINTING;		
			}
			break;
		default:
			break;
	}
}
/******************************************
功能：事件处理
作成者：
作成日期：
参数：无
返回值：无
*******************************************/
void Print_EventAction( PORTALFRAME *this, EVENT event )
{
	switch(event.event)
	{
		case PRINTER_EVENT_SETWAITTEMP:
			this->printInfo.stage = PRINT_STAGE_WAITTEMP;
			break;
		case PRINTER_EVENT_ROBOT_HOMEWAIT:
			this->printInfo.stage = PRINT_STAGE_ROBOT_HOMEWAIT;
			break;
		case PRINTER_EVENT_ROBOT_MOVEWAIT:
			this->printInfo.stage = PRINT_STAGE_ROBOT_MOVEWAIT;
			break;
		case PRINTER_EVENT_ROBOT_GETWAIT:
			this->printInfo.stage = PRINT_STAGE_ROBOT_GETWAIT;
			break;
		case PRINTER_EVENT_ROBOT_PUTWAIT:
			this->printInfo.stage = PRINT_STAGE_ROBOT_PUTWAIT;
			break;
		case PRINTER_EVENT_ROBOT_SETPARAMSWAIT:
			this->printInfo.stage = PRINT_STAGE_ROBOT_SETPARAMSWAIT;
			break;
		case PRINTER_EVENT_WAITBLOCKNULL:
			this->printInfo.stage = PRINT_STAGE_WAITBLOCKNULL;
		default:
			break;
	}
}

