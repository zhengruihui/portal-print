/********************** (C) COPYRIGHT 2011 STMicroelectronics ********************
  * @file    Globals.c
  * @author  Dedibot
  * @version V1.2.0
  * @date    2016-03-25
  * @brief   全局变量定义
*********************************************************************************/
#include "Globals.h"														//全局变量定义


/*******************************************
    全局变量
********************************************/


EXTRUDER_STRU g_ExtruderStructs[EXTRUDER_MAX];

/* 轴与限位开关的对应 */
const enum _INPUT g_Axis_Limit_Tbl[AXIS_MAX] =
{
/* X1_AXIS */		INPUT_LIMIT1,
/* Y1_AXIS */		INPUT_LIMIT2,
/* Z1_AXIS */		INPUT_LIMIT3,
/* E1_AXIS */		INPUT_MAX,
	
/* X2_AXIS */		INPUT_LIMIT5,
/* Y2_AXIS */		INPUT_LIMIT6,
/* Z2_AXIS */		INPUT_LIMIT7,
/* E2_AXIS_1 */		INPUT_MAX,
/* E2_AXIS_2 */		INPUT_MAX,
/* E2_AXIS_3 */		INPUT_MAX,
/* E2_AXIS_4 */		INPUT_MAX,
	
/* X3_AXIS */		INPUT_LIMIT9,
/* Y3_AXIS */		INPUT_LIMIT10,
/* Z3_AXIS */		INPUT_MAX,
/* E3_AXIS */		INPUT_MAX,


/* W_AXIS */		INPUT_MAX
};


//轴类型定义
const char g_AxisCodes[] =
{
	'X',
	'Y',
	'Z',
	'E',
	'W'
};
const u8 g_AxisCodesSize = sizeof(g_AxisCodes);


MOVE_MODULE * const g_FreeMoveModule = &g_MoveModules[MOVE_MODULE_4];
PLANNER g_FreePlanner;



/************ 龙门架1 ************/
//喷头设备
const u8 g_ExtruderCount_1 = 1;
const char* g_ExtruderCodes_1[] =
{
	"S"
};
EXTRUDER_STRU g_Extruder_Stru_1[] = 
{
	{TEMPCTRL_EXTRUDER1,	0, 0, 0, FAN_1, FAN_2, 90}
};

// 位置控制
const char g_AxisCodes_1_Origin[][PARSE_STRING_SIZE] =
{
	"X",
	"Y",
	"Z",
	"E",
	"W"
};
char g_AxisCodes_1[sizeof(g_AxisCodes_1_Origin)];

const u8 g_TotalAxesCount_1 = 5;
const enum _AXIS g_Axes_1[] =
{
	X1_AXIS,
	Y1_AXIS,
	Z1_AXIS,
	E1_AXIS,
	W_AXIS
};
const long g_AxesOffset_1[] =
{ 
	0,
	0,  
	0,
	0,
	0
};

const u8 g_MainAxesCount_1 = 3;
const enum _AXIS g_MainAxes_1[] =
{
	X1_AXIS,
	Y1_AXIS,
	Z1_AXIS
};
const u8 g_MainAxesIndex_1[] =
{ 
	0,
	1,
	2
};

const u8 g_ExtruderAxesCount_1 = 1;
const enum _AXIS g_ExtruderAxes_1[] =
{
	E1_AXIS
};
const u8 g_ExtruderAxesIndex_1[] =
{
	3
};

const u8 g_FreeAxesCount_1 = 1;
const enum _AXIS g_FreeAxes_1[] =
{
	W_AXIS
};
const u8 g_FreeAxesIndex_1[] =
{
	4
};
MOVE_MODULE * const g_MainMoveModule_1 = &g_MoveModules[MOVE_MODULE_1];
PLANNER g_MainPlanner_1;

const u8 g_HomingAxesCount_1 = 1;
const u8 g_subHomingAxesCount_1 = 1;
const enum _AXIS g_HomingAxes_1[] =
{
	X1_AXIS,
};
const enum _AXIS g_subHomingAxes_1[] =
{
	X1_AXIS,
};
//暂时没有好的方法设置原点坐标，用gcode来实现
const char *g_SetHomeGcode_1[2] = 
{
	"G92 X0",
	"G92 X0",
};
 


/************ 龙门架2 ************/
//喷头设备
const u8 g_ExtruderCount_2 = 4;
const char* g_ExtruderCodes_2[] =
{
	"S",
	"S",
	"S",
	"S"
};
EXTRUDER_STRU g_Extruder_Stru_2[] = 
{
	{TEMPCTRL_EXTRUDER2_1,	0, 0, 0, FAN_1, FAN_2, 90},
	{TEMPCTRL_EXTRUDER2_2,	0, 0, 0, FAN_3, FAN_4, 90},
	{TEMPCTRL_EXTRUDER2_3,	0, 0, 0, FAN_5, FAN_6, 90},
	{TEMPCTRL_EXTRUDER2_4,	0, 0, 0, FAN_7, FAN_8, 90}
};

// 位置控制
const char g_AxisCodes_2_Origin[][PARSE_STRING_SIZE] =
{
	"X",
	"Y",
	"Z",
	"E",
	"E",
	"E",
	"E",
	"W"
};
char g_AxisCodes_2[sizeof(g_AxisCodes_2_Origin)];

const u8 g_TotalAxesCount_2 = 8;
const enum _AXIS g_Axes_2[] =
{	
	X2_AXIS,	//龙门架2 X轴
	Y2_AXIS,    //龙门架2 Y轴
	Z2_AXIS,    //龙门架2 Z轴
	E2_AXIS_1,  //龙门架2 E1轴
	E2_AXIS_2,  //龙门架2 E2轴
	E2_AXIS_3,  //龙门架2 E3轴
	E2_AXIS_4,  //龙门架2 E4轴
	W_AXIS
};
const long g_AxesOffset_2[] =
{ 
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0
};

const u8 g_MainAxesCount_2 = 3;
const enum _AXIS g_MainAxes_2[] =
{
	X2_AXIS,	//龙门架2 X轴
	Y2_AXIS,    //龙门架2 Y轴
	Z2_AXIS,     //龙门架2 Z轴
};
const u8 g_MainAxesIndex_2[] =
{
	0,
	1,
	2,
	
};

const u8 g_ExtruderAxesCount_2 = 4;
const enum _AXIS g_ExtruderAxes_2[] =
{
	E2_AXIS_1,  //龙门架2 E1轴
	E2_AXIS_2,  //龙门架2 E2轴
	E2_AXIS_3,  //龙门架2 E3轴
	E2_AXIS_4,   //龙门架2 E4轴
};
const u8 g_ExtruderAxesIndex_2[] =
{
	3,
	4,
	5,
	6,
};

const u8 g_FreeAxesCount_2 = 1;
const enum _AXIS g_FreeAxes_2[] =
{
	W_AXIS
};
const u8 g_FreeAxesIndex_2[] =
{
	7,
};

MOVE_MODULE * const g_MainMoveModule_2 = &g_MoveModules[MOVE_MODULE_2];
PLANNER g_MainPlanner_2;

const u8 g_HomingAxesCount_2 = 3;
const u8 g_subHomingAxesCount_2 = 2;
const enum _AXIS g_HomingAxes_2[] =
{
	X2_AXIS,
	Y2_AXIS,
	Z2_AXIS,
};
const enum _AXIS g_subHomingAxes_2[] =
{
	X2_AXIS,
	Y2_AXIS,
};
const char *g_SetHomeGcode_2[2] = 
{
	"G92 X0 Y0 Z0",
	"G92 X0 Y0",
};






/************ 龙门架3 ************/
//喷头设备
const u8 g_ExtruderCount_3 = 1;
const char* g_ExtruderCodes_3[] =
{
	"S",
};
EXTRUDER_STRU g_Extruder_Stru_3[] = 
{
	{TEMPCTRL_EXTRUDER3_1,	0, 0, 0, FAN_5, FAN_6, 90},
};

// 位置控制
const char g_AxisCodes_3_Origin[][PARSE_STRING_SIZE] =
{
	"X",
	"Y",
	"Z",
	"E",
	"W"
};
char g_AxisCodes_3[sizeof(g_AxisCodes_3_Origin)];

const u8 g_TotalAxesCount_3 = 5;
const enum _AXIS g_Axes_3[] =
{
	X3_AXIS,	//龙门架3 X轴
	Y3_AXIS,  //龙门架3 Y1轴
	Z3_AXIS,    //龙门架3 Z轴
	E3_AXIS,  //龙门架3 E1轴
	W_AXIS
};
const long g_AxesOffset_3[] =
{
	0,
	7.86,	
	0,		//激光焦距
	0,
	0,
};

const u8 g_MainAxesCount_3 = 4;
const enum _AXIS g_MainAxes_3[] =
{
	X3_AXIS,	//龙门架3 X轴
	Y3_AXIS,  //龙门架3 Y1轴
	Z3_AXIS,     //龙门架3 Z轴
	W_AXIS
};
const u8 g_MainAxesIndex_3[] =
{
	0,
	1,
	2,
	4
};

const u8 g_ExtruderAxesCount_3 = 1;
const enum _AXIS g_ExtruderAxes_3[] =
{
	E3_AXIS,  //龙门架3 E1轴
};
const u8 g_ExtruderAxesIndex_3[] =
{
	3,
};

const u8 g_FreeAxesCount_3 = 1;
const enum _AXIS g_FreeAxes_3[] =
{
	E3_AXIS
};
const u8 g_FreeAxesIndex_3[] =
{
	3
};
MOVE_MODULE * const g_MainMoveModule_3 = &g_MoveModules[MOVE_MODULE_3];
PLANNER g_MainPlanner_3;

const u8 g_HomingAxesCount_3 = 2;
const u8 g_subHomingAxesCount_3 = 2;
const enum _AXIS g_HomingAxes_3[] =
{
	X3_AXIS,
	Y3_AXIS,
};
const enum _AXIS g_subHomingAxes_3[] =
{
	X3_AXIS,
	Y3_AXIS,
};

const char *g_SetHomeGcode_3[2] = 
{
	"G92 X0 Y0",
	"G92 X0 Y0",
};








